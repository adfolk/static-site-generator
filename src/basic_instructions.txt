Now that we have the extraction functions, we need to write the logic that splits the TextNode objects.

 Assignment
Create two new functions:
def split_nodes_image(old_nodes):
def split_nodes_link(old_nodes):
They should behave very similarly to split_nodes_delimiter, but obviously don't need a delimeter or a text type as input, because they always operate on images or links respectively. Here's some example usage:

node = TextNode(
    "This is text with a link [to boot dev](https://www.boot.dev) and [to youtube](https://www.youtube.com/@bootdotdev)",
    text_type_text,
)
new_nodes = split_nodes_link([node])
# [
#     TextNode("This is text with a link ", text_type_text),
#     TextNode("to boot dev", text_type_link, "https://www.boot.dev"),
#     TextNode(" and ", text_type_text),
#     TextNode(
#         "to youtube", text_type_link, "https://www.youtube.com/@bootdotdev"
#     ),
# ]

Write lots of tests for each. If it makes you feel better, this is probably the most difficult step in this project. Take your time.
Run and submit the tests from the root of the project.

Here are some spoilers that might help you out:

Make use of the extraction functions we wrote
If there are no images or links respectively, just return a list with the original TextNode in it
Don't append any TextNodes that have empty text to the final list
Your split_nodes_image and split_nodes_link functions will be very similar. You can try to share code between them if you want, but I was a copy/paste grug dev for this step.
You can use the .split() method with large strings as the delimeter, and it has an optional second "maxsplits" parameter, which you can set to 1 if you only want to split the string once at most. For each image extracted from the text, I split the text before and after the image markdown. For example:

sections = original_text.split(f"![{image_alt}]({image_link})", 1)
